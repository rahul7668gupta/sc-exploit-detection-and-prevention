package service

import (
	"fmt"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/rahul7668gupta/sc-exploit/pkg/model"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

// ContractPauser represents our main service
type ContractPauser struct {
	client            *ethclient.Client
	contractAddr      common.Address
	ownerAddr         common.Address
	privateKey        string
	db                *gorm.DB
	pendingTxs        chan common.Hash
	pendingTxnDetails chan TransactionDetails
}

func NewContractPauser(clientURL, contractAddr, ownerAddr, privateKey, dbConnString string) (*ContractPauser, error) {

	client, err := ethclient.Dial(clientURL)
	if err != nil {
		return nil, fmt.Errorf("failed to connect to the Ethereum client: %v", err)
	}

	db, err := gorm.Open(postgres.Open(dbConnString), &gorm.Config{})
	if err != nil {
		return nil, fmt.Errorf("failed to connect to the database: %v", err)
	}

	// Auto Migrate the schema
	err = db.AutoMigrate(&model.PerformanceMetrics{}, &model.VulnerabilityReport{}, &model.PauseEvent{})
	if err != nil {
		return nil, fmt.Errorf("failed to migrate database schema: %v", err)
	}

	return &ContractPauser{
		client:            client,
		contractAddr:      common.HexToAddress(contractAddr),
		ownerAddr:         common.HexToAddress(ownerAddr),
		privateKey:        privateKey,
		db:                db,
		pendingTxs:        make(chan common.Hash),
		pendingTxnDetails: make(chan TransactionDetails),
	}, nil
}
