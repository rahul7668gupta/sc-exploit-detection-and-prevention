// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "forge-std/Script.sol";
import "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol";
import "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol";
import "../src/VulnerableContract.sol";
import "../src/AttackContract.sol";

contract DeployVulnerableContract is Script {
    function run() external {
        // Start broadcasting transactions
        vm.startBroadcast();

        // Deploy the implementation contract
        VulnerableContract implementation = new VulnerableContract();

        // Deploy the proxy admin
        ProxyAdmin proxyAdmin = new ProxyAdmin(msg.sender);

        // Deploy the proxy contract and link it to the implementation
        TransparentUpgradeableProxy proxy = new TransparentUpgradeableProxy(
            address(implementation), address(proxyAdmin), abi.encodeWithSelector(VulnerableContract.initialize.selector)
        );

        // Deploy the implementation contract
        AttackContract attackContract = new AttackContract(proxy);

        // Stop broadcasting transactions
        vm.stopBroadcast();

        // Log the addresses
        console.log("Implementation contract deployed at:", address(implementation));
        console.log("Proxy contract deployed at:", address(proxy));
        console.log("Proxy admin deployed at:", address(proxyAdmin));
        console.log("Attack contract deployed at:", address(attackContract));
    }
}
