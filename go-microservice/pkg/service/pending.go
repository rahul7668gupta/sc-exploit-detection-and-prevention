package service

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"time"

	"github.com/rahul7668gupta/sc-exploit/pkg/model"
)

func (cp *ContractPauser) SimulateTransaction(txDetails TransactionDetails) (map[string]interface{}, error) {
	url := os.Getenv("TENDERLY_RPC_URL") // Replace with the actual Sepolia RPC URL
	// Prepare the payload for the tenderly_simulateTransaction method
	// Convert numeric values to hexadecimal strings
	gasLimitHex := fmt.Sprintf("0x%x", txDetails.GasLimit)
	gasPriceHex := fmt.Sprintf("0x%x", txDetails.GasPrice)
	valueHex := fmt.Sprintf("0x%x", txDetails.Value)

	payload := map[string]interface{}{
		"jsonrpc": "2.0",
		"method":  "tenderly_simulateTransaction",
		"params": []interface{}{
			map[string]interface{}{
				"from":     txDetails.From,
				"to":       txDetails.To,
				"gas":      gasLimitHex,
				"gasPrice": gasPriceHex,
				"value":    valueHex,
				"data":     txDetails.Input,
			},
			"latest",
		},
		"id": 0,
	}

	log.Println("Simulating transaction with payload:", payload)

	jsonData, err := json.Marshal(payload)
	if err != nil {
		// log.Printf("Failed to marshal JSON data: %+v", err)
		return nil, err
	}

	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		// log.Printf("Failed to create HTTP request: %+v", err)
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")

	client := &http.Client{Timeout: 10 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		// log.Printf("Failed to send HTTP request: %+v", err)
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		// log.Printf("Failed to simulate transaction, status code: %d", resp.StatusCode)
		return nil, fmt.Errorf("failed to simulate transaction, status code: %d", resp.StatusCode)
	}

	var result map[string]interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		// log.Printf("Failed to decode JSON response: %+v", err)
		return nil, err
	}

	if result["error"] != nil {
		// log.Printf("Failed to simulate transaction: %+v", result["error"])
		return nil, fmt.Errorf("failed to simulate transaction: %v", result["error"])
	}

	log.Println("Transaction simulated successfully")

	return result, nil
}

func (cp *ContractPauser) ProcessPendingTransactionWithDetail(txn TransactionDetails, metrics *model.PerformanceMetrics) {
	startTime := time.Now()

	simulationResult, err := cp.SimulateTransaction(txn)
	if err != nil {
		log.Printf("Failed to simulate transaction: %v", err)
		return
	}

	metrics.ProcessedTxCount++

	isSuspiciousTxn, err := cp.IsSuspiciousTransaction(simulationResult)
	if err != nil {
		log.Printf("Failed to check for suspicious transaction: %v", err)
	} else if isSuspiciousTxn {
		log.Printf("Suspicious transaction detected: %s", txn.Hash.Hex())
		metrics.SuspiciousTxCount++
		cp.PauseContract(txn.Hash)
	} else if !isSuspiciousTxn {
		log.Printf("Not a suspicious transaction: %s", txn.Hash.Hex())
	}

	metrics.AverageTxProcessTime = (metrics.AverageTxProcessTime*float64(metrics.ProcessedTxCount-1) + time.Since(startTime).Seconds()) / float64(metrics.ProcessedTxCount)
}
