const express = require('express');
const { ethers } = require('ethers');
const hre = require("hardhat");
require('dotenv').config();

const app = express();
app.use(express.json());

// Clear environment variable cache and reload
clearEnvCache();

const RPC_URL = process.env.RPC_URL || "http://localhost:8545";

console.log('RPC URL:', RPC_URL);

function clearEnvCache() {
  for (const key in process.env) {
    if (Object.prototype.hasOwnProperty.call(process.env, key)) {
      delete process.env[key];
    }
  }
  require('dotenv').config();
}

async function resetFork() {
  console.log('Resetting fork...');
  await hre.network.provider.request({
    method: "hardhat_reset",
    params: [{
      forking: {
        jsonRpcUrl: RPC_URL,
      },
    }],
  });
}

async function getBaseFee() {
  const latestBlock = await hre.ethers.provider.getBlock("latest");
  return latestBlock.baseFeePerGas;
}

app.post('/simulate-transaction', async (req, res) => {
  try {
    const { hash, from, to, input, value, gasLimit, gasPrice, nonce } = req.body;

    if (!from || !to || !input || !value || !gasLimit || !gasPrice || !nonce) {
      return res.status(400).json({ error: 'All transaction fields are required' });
    }

    console.log('Transaction details:', req.body);

    // Reset the Hardhat network to a fresh fork
    await resetFork();

    // Get the current base fee
    const currentBaseFee = await getBaseFee();
    console.log('Current Base Fee:', currentBaseFee.toString());

    // Calculate maxFeePerGas and maxPriorityFeePerGas
    const maxPriorityFeePerGas = ethers.BigNumber.from(gasPrice).sub(currentBaseFee);
    const maxFeePerGas = ethers.BigNumber.from(gasPrice).add(ethers.utils.parseUnits("1", "gwei")); // Add a small buffer

    // Get the signer for the transaction sender
    await hre.network.provider.request({
      method: "hardhat_impersonateAccount",
      params: [from],
    });

    const signer = await hre.ethers.getSigner(from);

    // Simulate the transaction
    const tx = await signer.sendTransaction({
      to,
      data: input,
      value: ethers.BigNumber.from(value),
      gasLimit: ethers.BigNumber.from(gasLimit),
      maxFeePerGas,
      maxPriorityFeePerGas,
      nonce: ethers.BigNumber.from(nonce),
      type: 2 // EIP-1559 transaction type
    });

    // Wait for the transaction to be mined
    const receipt = await tx.wait();

    // Stop impersonating the account
    await hre.network.provider.request({
      method: "hardhat_stopImpersonatingAccount",
      params: [from],
    });

    // Return the simulation results
    res.json({
      success: true,
      transactionHash: receipt.transactionHash,
      blockNumber: receipt.blockNumber,
      gasUsed: receipt.gasUsed.toString(),
      effectiveGasPrice: receipt.effectiveGasPrice.toString(),
      logs: receipt.logs,
      status: receipt.status
    });
  } catch (error) {
    console.error('Error simulating transaction:', error);
    res.status(500).json({ error: 'Error simulating transaction', details: error.message });
  }
});

const PORT = process.env.PORT || 3000;

async function main() {
  console.log('Starting server...');
  hre.artifacts.clearCache();
  // Configure Hardhat to use a forked network
  await resetFork();

  app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
  });
}

main().catch((error) => {
  console.error(error);
  process.exit(1);
});