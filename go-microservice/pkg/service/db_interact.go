package service

import (
	"log"
	"os/exec"

	"github.com/rahul7668gupta/sc-exploit/pkg/model"
)

func (cp *ContractPauser) storePerformanceMetrics(metrics model.PerformanceMetrics) {
	result := cp.db.Create(&metrics)
	if result.Error != nil {
		log.Printf("Failed to store performance metrics: %v", result.Error)
	}
}

func (cp *ContractPauser) storePauseEvent(triggeringTxHash, pauseTxHash string, successful bool) {
	pauseEvent := model.PauseEvent{
		TriggeringTxHash: triggeringTxHash,
		PauseTxHash:      pauseTxHash,
		SuccessfulPause:  successful,
	}
	result := cp.db.Create(&pauseEvent)
	if result.Error != nil {
		log.Printf("Failed to store pause event: %v", result.Error)
	}
}

func (cp *ContractPauser) RunVulnerabilityAnalysis() {
	cmd := exec.Command("slither", cp.contractAddrVulnerableProxy.Hex())
	output, err := cmd.CombinedOutput()
	if err != nil {
		log.Printf("Slither analysis failed: %v", err)
		return
	}

	report := string(output)
	severity := "Low" // We'll need to parse the Slither output to determine the actual severity

	vulnReport := model.VulnerabilityReport{
		Report:   report,
		Severity: severity,
	}
	result := cp.db.Create(&vulnReport)
	if result.Error != nil {
		log.Printf("Failed to store vulnerability report: %v", result.Error)
	}
	log.Printf("Vulnerability analysis complete")
	log.Println(report)
}
