// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin-upgradable/contracts/access/OwnableUpgradeable.sol";
import "@openzeppelin-upgradable/contracts/utils/PausableUpgradeable.sol";
import "@openzeppelin-upgradable/contracts/proxy/utils/Initializable.sol";
import "@openzeppelin-upgradable/contracts/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin-upgradable/contracts/utils/ReentrancyGuardUpgradeable.sol";

contract FixedContract is
    Initializable,
    OwnableUpgradeable,
    PausableUpgradeable,
    UUPSUpgradeable,
    ReentrancyGuardUpgradeable
{
    mapping(address => uint256) public balances;

    function initialize() public reinitializer(2) {
        __ReentrancyGuard_init();
        __Ownable_init(_msgSender());
        __Pausable_init();
    }

    function deposit() external payable whenNotPaused nonReentrant {
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint256 amount) external whenNotPaused nonReentrant {
        require(balances[msg.sender] >= amount, "Insufficient balance");

        // Update balance before transferring funds
        balances[msg.sender] -= amount;

        (bool success,) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");
    }

    function pause() external onlyOwner {
        _pause();
    }

    function unpause() external onlyOwner {
        _unpause();
    }

    function _authorizeUpgrade(address newImplementation) internal override {}

    receive() external payable {}
}
