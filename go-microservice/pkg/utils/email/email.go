package email

import (
	"fmt"
	"os"

	"github.com/sendgrid/sendgrid-go"
	"github.com/sendgrid/sendgrid-go/helpers/mail"
)

type EmailService struct {
	client    *sendgrid.Client
	fromEmail string
	fromName  string
	toEmails  []string
	subject   string
}

func NewEmailService() (*EmailService, error) {
	apiKey := os.Getenv("SENDGRID_API_KEY")
	if apiKey == "" {
		return nil, fmt.Errorf("SENDGRID_API_KEY must be set in environment variables")
	}

	fromEmail := os.Getenv("FROM_EMAIL")
	if fromEmail == "" {
		return nil, fmt.Errorf("FROM_EMAIL must be set in environment variables")
	}

	fromName := os.Getenv("FROM_NAME")
	if fromName == "" {
		return nil, fmt.Errorf("FROM_NAME must be set in environment variables")
	}

	toEmail := os.Getenv("TO_EMAIL")
	if toEmail == "" {
		return nil, fmt.Errorf("TO_EMAILS must be set in environment variables")
	}

	subject := os.Getenv("EMAIL_SUBJECT")
	if subject == "" {
		return nil, fmt.Errorf("EMAIL_SUBJECT must be set in environment variables")
	}

	// set all of the envs to the struct
	client := sendgrid.NewSendClient(apiKey)
	return &EmailService{
		client:    client,
		fromEmail: fromEmail,
		fromName:  fromName,
		toEmails:  []string{toEmail},
		subject:   subject,
	}, nil
}

func (es *EmailService) SendEmail(txHash string, htmlContent string) error {
	from := mail.NewEmail(es.fromName, es.fromEmail)
	to := make([]*mail.Email, len(es.toEmails))
	for i, email := range es.toEmails {
		to[i] = mail.NewEmail("", email)
	}

	plainTextContent := fmt.Sprintf("Found a vulnerable transaction on hash %s for re-entrancy attack", txHash)
	message := mail.NewV3MailInit(from, es.subject, to[0], mail.NewContent("text/plain", plainTextContent))
	if htmlContent != "" {
		message.AddContent(mail.NewContent("text/html", htmlContent))
	}

	// Add all recipients
	personalization := mail.NewPersonalization()
	for _, recipient := range to {
		personalization.AddTos(recipient)
	}
	message.AddPersonalizations(personalization)

	response, err := es.client.Send(message)
	if err != nil {
		return fmt.Errorf("failed to send email: %v", err)
	}

	if response.StatusCode >= 200 && response.StatusCode < 300 {
		fmt.Println("Email sent successfully")
	} else {
		return fmt.Errorf("unexpected status code: %d - %s", response.StatusCode, response.Body)
	}

	return nil
}
