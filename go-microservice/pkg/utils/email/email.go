package email

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"os"
)

type EmailService struct {
	serviceID                string
	templateID               string
	userID                   string
	apiKey                   string
	emailReceiver            string
	emailNotificationEnabled bool
}

type EmailContent struct {
	PauseContractAddress string
	ReentrancyHash       string
	PauseHash            string
}

func NewEmailService() (*EmailService, error) {
	serviceID := os.Getenv("EMAIL_JS_SERVICE_ID")
	if serviceID == "" {
		return nil, fmt.Errorf("EMAIL_JS_SERVICE_ID must be set in environment variables")
	}
	templateID := os.Getenv("EMAIL_JS_TEMPLATE_ID")
	if templateID == "" {
		return nil, fmt.Errorf("EMAIL_JS_TEMPLATE_ID must be set in environment variables")
	}
	userID := os.Getenv("EMAIL_JS_USER_ID")
	if userID == "" {
		return nil, fmt.Errorf("EMAIL_JS_USER_ID must be set in environment variables")
	}
	apiKey := os.Getenv("EMAIL_JS_API_KEY")
	if apiKey == "" {
		return nil, fmt.Errorf("EMAIL_JS_API_KEY must be set in environment variables")
	}
	emailReceiver := os.Getenv("EMAIL_RECEIVER")
	if emailReceiver == "" {
		return nil, fmt.Errorf("EMAIL_RECEIVER must be set in environment variables")
	}
	enableEmailNotification := os.Getenv("ENABLE_EMAIL_NOTIFICATION")
	if enableEmailNotification == "" {
		return nil, fmt.Errorf("ENABLE_EMAIL_NOTIFICATION must be set in environment variables")
	}
	return &EmailService{
		serviceID:                serviceID,
		templateID:               templateID,
		userID:                   userID,
		apiKey:                   apiKey,
		emailReceiver:            emailReceiver,
		emailNotificationEnabled: enableEmailNotification == "true",
	}, nil
}

func (es *EmailService) SendEmail(address string, reentrancyHash string, pauseHash string) error {
	if !es.emailNotificationEnabled {
		// Email notification is disabled
		return nil
	}

	url := "https://api.emailjs.com/api/v1.0/email/send"
	templateParams := map[string]string{
		"to_email":   es.emailReceiver,
		"address":    address,
		"re_hash":    reentrancyHash,
		"pause_hash": pauseHash,
	}

	// Create the request payload
	payload := map[string]interface{}{
		"service_id":      es.serviceID,
		"template_id":     es.templateID,
		"user_id":         es.userID,
		"accessToken":     es.apiKey,
		"template_params": templateParams,
	}

	// Convert payload to JSON
	jsonData, err := json.Marshal(payload)
	if err != nil {
		return fmt.Errorf("failed to marshal JSON: %v", err)
	}

	// Create a new HTTP request
	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		return fmt.Errorf("failed to create request: %v", err)
	}

	// Set the content type to application/json
	req.Header.Set("Content-Type", "application/json")

	// Send the request
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return fmt.Errorf("failed to send request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response status
	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("failed to send email, status code: %d", resp.StatusCode)
	}

	return nil
}
