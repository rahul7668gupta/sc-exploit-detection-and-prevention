// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "forge-std/Script.sol";
import "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol";
import "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol";
import "../src/FixedContract.sol"; // Import the fixed contract
import "../src/VulnerableContract.sol"; // Import the vulnerable contract for reference

contract DeployFixedContract is Script {
    function run() external {
        // Start broadcasting transactions
        vm.startBroadcast();

        // Deploy the fixed implementation contract
        FixedContract fixedImplementation = new FixedContract();

        // Get the existing proxy admin and proxy contract addresses
        address proxyAdminAddress = vm.envAddress("PROXY_ADMIN_CONTRACT_ADDRESS");
        address proxyAddress = vm.envAddress("VULNERABLE_CONTRACT_ADDRESS_PROXY");

        // Initialize the ProxyAdmin and TransparentUpgradeableProxy instances
        ProxyAdmin proxyAdmin = ProxyAdmin(proxyAdminAddress);

        bytes memory data = abi.encodeWithSignature("initialize()");

        // Update the implementation address on the proxy contract
        proxyAdmin.upgradeAndCall(ITransparentUpgradeableProxy(proxyAddress), address(fixedImplementation), data);

        // Stop broadcasting transactions
        vm.stopBroadcast();

        // Log the addresses
        console.log("Fixed implementation contract deployed at:", address(fixedImplementation));
        console.log("Proxy contract updated to new implementation at:", proxyAddress);
    }
}
