package service

import (
	"context"
	"log"
	"math/big"
	"time"

	"github.com/ethereum/go-ethereum/core/types"
	"github.com/rahul7668gupta/sc-exploit/pkg/model"
)

func (cp *ContractPauser) MonitorPendingTransactions() {
	supportsSub := cp.client.Client().SupportsSubscriptions()
	if supportsSub {
		sub, err := cp.client.Client().EthSubscribe(context.Background(), cp.pendingTxs, "newPendingTransactions")
		if err != nil {
			log.Fatalf("Failed to subscribe to pending transactions: %v", err)
		}
		defer sub.Unsubscribe()
		var metrics model.PerformanceMetrics
		metricsTicker := time.NewTicker(5 * time.Second)
		defer metricsTicker.Stop()

		for {
			select {
			case err := <-sub.Err():
				log.Fatal(err)
			case txHash := <-cp.pendingTxs:
				go cp.ProcessPendingTransaction(txHash, &metrics)
			case <-metricsTicker.C:
				cp.storePerformanceMetrics(metrics)
				metrics = model.PerformanceMetrics{
					ProcessedTxCount: 0,
				}
			}
		}
	} else {
		log.Println("Client does not support subscriptions")
	}
}

func (cp *ContractPauser) IsSuspiciousTransaction(tx *types.Transaction) bool {
	// Implement your suspicious transaction detection logic here
	if tx.To() != nil && *tx.To() == cp.contractAddr {
		if tx.Value().Cmp(big.NewInt(1e18)) > 0 { // e.g., if value > 1 ETH
			return true
		}
	}
	return false
}
