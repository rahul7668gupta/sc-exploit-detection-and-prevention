// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin-upgradable/contracts/access/OwnableUpgradeable.sol";
import "@openzeppelin-upgradable/contracts/utils/PausableUpgradeable.sol";
import "@openzeppelin-upgradable/contracts/proxy/utils/Initializable.sol";
import "@openzeppelin-upgradable/contracts/proxy/utils/UUPSUpgradeable.sol";
import "forge-std/console.sol";

contract VulnerableContract is Initializable, OwnableUpgradeable, PausableUpgradeable, UUPSUpgradeable {
    mapping(address => uint256) public balances;

    function initialize() public initializer {
        __Ownable_init(msg.sender);
        __Pausable_init();
    }

    function deposit() external payable whenNotPaused {
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint256 amount) external whenNotPaused {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;

        // Vulnerable to reentrancy attack
        (bool success,) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");
    }

    function pause() external onlyOwner {
        _pause();
    }

    function unpause() external onlyOwner {
        _unpause();
    }

    function _authorizeUpgrade(address newImplementation) internal pure override {
        require(newImplementation != address(0), "New implementation is the zero address");
    }

    receive() external payable {}
}
